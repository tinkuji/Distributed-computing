import java.util.*;

class SuzukiKasami {
    private static int numProcesses = 5;
    private static boolean[] request = new boolean[numProcesses];
    private static boolean[] token = new boolean[numProcesses];
    private static int processID;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter process ID (0 to " + (numProcesses - 1) + "): ");
        processID = scanner.nextInt();
        scanner.close();

        // Initialize token
        if (processID == 0)
            Arrays.fill(token, true);

        // Simulate token passing
        for (int i = 0; i < 10; i++) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (token[processID]) {
                token[processID] = false;
                System.out.println("Process " + processID + " is in CS");
                // Simulate critical section
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("Process " + processID + " exited CS");

                // Release request
                for (int j = 0; j < numProcesses; j++) {
                    if (request[j]) {
                        token[j] = true;
                        request[j] = false;
                    }
                }
            }

            // Generate random request
            if (Math.random() < 0.5) {
                request[processID] = true;
                System.out.println("Process " + processID + " requested token");
            }
        }
    }
}


output:
Enter process ID (0 to 4): 0
Enter process ID (0 to 4): 0
Process 0 is in CS
Process 0 exited CS
Process 0 requested token
Process 0 requested token
Process 0 requested token


Let's break down the Suzuki-Kasami algorithm code and its output step by step:

-->Initialization:
The program prompts the user to input the process ID.
It initializes variables and scanner for input.
-->Requesting Critical Section Access:
Each process (including Process 0) iterates through all other processes.
It sends a request message to each process for access to the critical section.
-->Receiving Replies:
While waiting for replies from other processes, the program simulates waiting by sleeping for a short time.
Once all replies are received, the process proceeds to enter the critical section.
-->Entering Critical Section:
The process successfully enters the critical section and starts performing its work.
This is indicated by the message "Process X entering critical section".
-->Exiting Critical Section:
After completing the work, the process exits the critical section.
This is indicated by the message "Process X exiting critical section".
-->End of Execution:
The execution ends after the process exits the critical section.

Output:

The output shows the actions performed by each process, including sending requests, entering and exiting the critical section.
For example, if Process 0 is selected, it will send requests to all other processes (1, 2, 3, and 4), enter the critical section, perform work, and exit the critical section. The same applies to other processes, depending on their IDs.
